// Generated by CoffeeScript 1.9.3
(function() {
  var Action, ajax, buildParam, buildParamR, jsonp, parseCurrentParam, parseParam;

  Action = require('action-js');

  parseParam = function(str) {
    var i, j, key, len, pair, pairs, params, value;
    if (str != null) {
      i = str.indexOf('?');
      str = str.slice(i + 1);
      pairs = str.split("&");
      params = {};
      for (j = 0, len = pairs.length; j < len; j++) {
        pair = pairs[j];
        pair = pair.split("=");
        key = decodeURIComponent(pair[0]);
        value = pair.length === 2 ? decodeURIComponent(pair[1]) : void 0;
        if (params[key] != null) {
          if (!(params[key] instanceof Array)) {
            params[key] = [params[key]];
          }
          params[key].push(value);
        } else {
          params[key] = value;
        }
      }
      return params;
    } else {
      return {};
    }
  };

  parseCurrentParam = function() {
    return parseParam(window.location.search);
  };

  buildParamR = function(prefix, data) {
    var j, k, key, len, result, v;
    result = [];
    if (data instanceof Array) {
      for (j = 0, len = data.length; j < len; j++) {
        v = data[j];
        if ((typeof v) === 'object') {
          result.push(buildParamR(prefix, v));
        } else if (v != null) {
          result.push(encodeURIComponent(prefix) + "=" + encodeURIComponent(v));
        }
      }
    } else {
      for (k in data) {
        v = data[k];
        key = prefix ? prefix + '[' + k + ']' : k;
        if ((typeof v) === 'object') {
          result.push(buildParamR(key, v));
        } else if (v != null) {
          result.push(encodeURIComponent(key) + "=" + encodeURIComponent(v));
        }
      }
    }
    return result.join('&');
  };

  buildParam = function(data) {
    return buildParamR('', data);
  };

  jsonp = function(opts) {
    return new Action(function(cb) {
      var callbackName, script;
      callbackName = 'callback_' + (Math.round(Math.random() * 1e16)).toString(36);
      script = document.createElement('script');
      window[callbackName] = function(resp) {
        script.parentNode.removeChild(script);
        cb(resp);
        return window[callbackName] = void 0;
      };
      script.onerror = function() {
        script.parentNode.removeChild(script);
        cb(new Error('REQUEST_ERROR: error when making jsonp request'));
        window[callbackName] = void 0;
        return false;
      };
      script.onload = function() {
        return false;
      };
      script.src = opts.url + (opts.url.indexOf('?') === -1 ? '?' : '&') + (opts.callback ? opts.callback : 'callback') + '=' + callbackName;
      script.callbackName = callbackName;
      document.body.appendChild(script);
      return script;
    });
  };

  ajax = function(opts) {
    return new Action(function(cb) {
      var k, ref, v, xhr;
      xhr = new window.XMLHttpRequest;
      xhr.open(opts.method, opts.url, true, opts.user, opts.password);
      xhr.onload = function() {
        if (xhr.readyState === 4) {
          if (xhr.status >= 200 && xhr.status < 300) {
            if (opts.responseType != null) {
              return cb(xhr.response);
            } else {
              return cb(xhr.responseText);
            }
          } else {
            return cb(new Error('REQUEST_ERROR: status' + xhr.status));
          }
        }
      };
      ref = opts.headers;
      for (k in ref) {
        v = ref[k];
        xhr.setRequestHeader(k, v);
      }
      if (opts.timeout) {
        xhr.timeout = opts.timeout;
        xhr.ontimeout = function() {
          return cb(new Error('REQUEST_ERROR: timeout'));
        };
      }
      if (opts.responseType) {
        xhr.responseType = opts.responseType;
      }
      switch (typeof opts.data) {
        case 'string':
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          xhr.send(opts.data);
          break;
        case 'object':
          if (opts.data instanceof window.FormData) {
            xhr.send(opts.data);
          } else {
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
            xhr.send(JSON.stringify(opts.data));
          }
          break;
        default:
          xhr.send();
      }
      return xhr;
    });
  };

  module.exports = {
    parseParam: parseParam,
    parseCurrentParam: parseCurrentParam,
    buildParam: buildParam,
    jsonp: jsonp,
    ajax: ajax
  };

}).call(this);
